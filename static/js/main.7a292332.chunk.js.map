{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","className","this","props","city","weathericon","temp_celsius","temp_min","temp_max","minmaxTemp","description","Component","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","React","API_key","App","getweather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a292332.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass Weather extends Component{\n    render(){\n        return(\n            <div className='container text-light'>\n                <div className='cards pt-4'>\n                    <h1>{this.props.city}</h1>\n                    <h5 className=\"py-4\">\n                        <i className={`wi ${this.props.weathericon} display-1`}/>\n                    </h5>\n\n                    {this.props.temp_celsius? (<h1 className=\"py-2\">{this.props.temp_celsius}&deg;</h1>):null}  \n\n                    {minmaxTemp(this.props)}\n                    <h4 className=\"py-4\">{this.props.description}</h4>\n                </div>\n            </div>\n        );\n    }  \n}\n\nfunction minmaxTemp(props){\n    if(props.temp_min && props.temp_max)\n    {return(\n        <h3>\n        <span className=\"px-4\">{props.temp_min}&deg;</span>\n        <span className=\"px-4\">{props.temp_max}&deg;</span>\n        </h3>\n    );}\n}\n\n\n\nexport default Weather;","import React from 'react';\nimport './form.style.css';\n\nclass Form extends React.Component{\n    render()\n    {\n        return(\n            <div className='container'>\n                <div>\n                    {this.props.error? error():null}\n                </div>\n                <form onSubmit={this.props.loadweather}>\n                <div className='row'>\n                    <div className='col-md-3 offset-md-2'>\n                        <input type=\"text\" className=\"form-control\" name=\"city\" \n                        autoComplete=\"off\" placeholder=\"City\"/>\n                    </div>\n                    <div className='col-md-3'>\n                    <input type=\"text\" className=\"form-control\" name=\"country\" \n                        autoComplete=\"off\" placeholder=\"Country\"/>\n                    </div>\n                    <div className='col-md-3 mt-md-0 text-md-left'>\n                        <button className=\"btn btn-warning\">Get Weather</button>\n                    </div>\n                </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nfunction error(){\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please Enter City and Country\n        </div>\n    );\n}\nexport default Form;","import React,{Component} from 'react';\nimport './App.css';\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from './components/weather.component';\nimport Form from './components/form.component';\n\nconst API_key = \"6bd0baedd8fcda02e468c1c4051dee1b\";\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n\n    this.weathericon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n    \n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp)\n  {\n    let cel = Math.floor(temp-273.15);\n    return cel;\n  }\n\n  \n\n  getweather = async(e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    if(city&&country){\n    const api_call= await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_key}`);\n    \n    const response = await api_call.json();\n    console.log(response); \n\n    this.setState({\n      city: `${response.name},${response.sys.country}`,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description:response.weather[0].description\n    })\n\n    this.get_WeatherIcon(this.weathericon,response.weather[0].id);\n  }else\n  {\n    this.setState({error:true});\n  }\n  };\n\n  render(){\n    return(\n      <div className='App'>\n        <Form loadweather={this.getweather} error={this.state.error}/>\n        <Weather city={this.state.city} country={this.state.country} temp_celsius={this.state.celsius} \n        temp_max={this.state.temp_max} temp_min={this.state.temp_min} description={this.state.description}\n        weathericon={this.state.icon}  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}